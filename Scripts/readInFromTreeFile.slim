initialize(){

    //Source File With Helper Functions
	//source("./dev_Utils.slim");

	//KNOBS//

	endOfSimulation = 150000;

	introduce = 100000;

	samplingInterval = 50;

	numberOfLakes = 25;	
	
	optimumPhenoMarine = 10;
	
	optimumPhenoFresh = -10;

	individualsInOcean = 5000;
	
	individualsInFresh = 5000;

	numberOfEffectRegions = 10;

	sizeOfEffectRegions = 100000;

	sizeOfNonEffectBuffer = 4950000;

	mutationRateInEffectRegions = 1e-10;
	
	mutationRateInNeutralRegions = 0; //Because TreeSeq :-) 
	
	recombinationRateInEffectRegions = 1e-8;

	recombinationRateInNeutralRegions = 1e-8;

	migrationRate = 5e-5;

	//For the Header of Files

	individualsPerFresh = individualsInFresh/numberOfLakes;	
	lengthOfPops = asFloat(numberOfLakes);
	numberOfSamplingPoints = endOfSimulation/samplingInterval;	

	//Define constants 	

	defineConstant("END",endOfSimulation);
	defineConstant("INT",samplingInterval);
	defineConstant("NLAKES",numberOfLakes);
	defineConstant("IIO", individualsInOcean);
	defineConstant("IIF", individualsInFresh);	
	defineConstant("LOP", lengthOfPops);
	defineConstant("IPF",individualsPerFresh);
	defineConstant("PATH",pathToOutputFile);
	defineConstant("C", numberOfEffectRegions);    	// number of Effect Regions;
	defineConstant("W", sizeOfNonEffectBuffer);  	// size of neutral buffer on each side
	defineConstant("P", sizeOfEffectRegions);   	// Size of contribution (Effect) Loci 
	defineConstant("INP", introduce);
	defineConstant("MGR", migrationRate);

	//Marine individuals need a one-dimentional spatial position

	initializeSLiMOptions(dimensionality="x");
	initializeTreeSeq();

	//initialize all mutation types
	//Move individual trait value in the:

	initializeMutationType("m1", 0.5, "g", 0.5, 1.0);  //Positive Direction, Dominant 
	initializeMutationType("m2", 0.5, "g", -0.5, 1.0); //Negative Direction, Dominant
	//initializeMutationType("m3", 0.5, "f", 0.0);       //Neither Direction, Neutral
	initializeMutationType("m4", 0.5, "g", 0.5, 1.0);  //Positive Direction, Recessive
	initializeMutationType("m5", 0.5, "g", -0.5, 1.0); //Negative Direction, Recessive
	initializeMutationType("m6", 0.5, "g", 0.6, 1.0);  //Positive Direction, Additive
	initializeMutationType("m7", 0.5, "g", -0.6, 1.0); //Negative Direction, Additive

	//Genomic elements: 	

	initializeGenomicElementType("g1", m1, 0.0); //Neutral, although m1 is defined to arise, notice the mutRate in these regions is 0
	initializeGenomicElementType("g2", c(m1,m2,m4,m5,m6,m7), c(1.0,1.0,1.0,1.0,1.0,1.0)); 	//Potential to impact individual trait value

	//Make all mutations stack "Late" meaning the last mutation to arise at a locus takes precedent

	m1.mutationStackPolicy = "l";
	m2.mutationStackPolicy = "l";
	//m3.mutationStackPolicy = "l";
	m4.mutationStackPolicy = "l";
	m5.mutationStackPolicy = "l";
	m6.mutationStackPolicy = "l";
	m7.mutationStackPolicy = "l";
	
	//initialize genomic arch.
	// |----------NonEffect-----------|-Effect(g3)-|----------NonEffect----------|

	mutRateVector = NULL;
	recombVector = NULL;
	lociVector = NULL;

	pos = 0;
	q = NULL;
	for (i in 1:C)
	{
		initializeGenomicElement(g1, pos, pos + W-1);    
		pos = pos + W;
		recombVector = c(recombVector,recombinationRateInNeutralRegions);
		mutRateVector = c(mutRateVector,mutationRateInNeutralRegions);
		lociVector = c(lociVector,pos-1);

		initializeGenomicElement(g2, pos, pos + P-1);
		q = c(q,c(pos,pos+P-1));
		pos = pos + P;	
		recombVector = c(recombVector,recombinationRateInEffectRegions);
		mutRateVector = c(mutRateVector,mutationRateInEffectRegions);
		lociVector = c(lociVector,pos-1);

		initializeGenomicElement(g1, pos, pos + W-1);
		pos = pos + W;
		recombVector = c(recombVector,recombinationRateInNeutralRegions);
		mutRateVector = c(mutRateVector,mutationRateInNeutralRegions);
		lociVector = c(lociVector,pos-1);
	}

	catn("end of chromosome position: "+pos);
	totalNumOfLoci = pos;

	defineConstant("TL", totalNumOfLoci);
	defineConstant("Q", q);     // remember our QTL positions

	initializeRecombinationRate(recombVector,lociVector);	
	initializeMutationRate(mutRateVector,lociVector); 	

	//Interaction Function for Oceanic mateChoice() callback...

	initializeInteractionType(1, "x", reciprocal=T, maxDistance=1.0);
	i1.setInteractionFunction("n", 0.5, 0.5);

	//Interation Function for Freshwater mateChoice() callback...

	initializeInteractionType(2, "x", reciprocal=T, maxDistance=0.02);
	i2.setInteractionFunction("n", 0.5, 0.02);

}


// create a population of 500 individuals
1 late(){
	sim.readFromPopulationFile(location_of_tree_file);
}

// output samples of 10 genomes periodically, all fixed mutations at end
1000 late() { p1.outputSample(10); }
2000 late() { p1.outputSample(10); }
2000 late() { sim.outputFixedMutations(); }

fitness(m1) {return 1.0;}
fitness(m2) {return 1.0;}
fitness(m4) {return 1.0;}
fitness(m5) {return 1.0;}
fitness(m6) {return 1.0;}
fitness(m7) {return 1.0;}
